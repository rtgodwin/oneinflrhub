z_value <- coefs / se
p_value <- 2 * (1 - pnorm(abs(z_value)))
tabl <- cbind(
Estimate = coefs,
Std.Error = se,
z_value = z_value,
p.value = p_value
)
significance <- sapply(p_value, get_significance)
result_df <- data.frame(tabl, significance)
colnames(result_df)[5] <- ""
return(result_df)
}
# Function to determine significance symbols
get_significance <- function(p_value) {
if (p_value < 0.001) {
return("***")
} else if (p_value < 0.01) {
return("**")
} else if (p_value < 0.05) {
return("*")
} else if (p_value < 0.1) {
return(".")
} else {
return("")
}
}
# Creating tables for beta and gamma coefficients
beta_table <- create_table(beta_vals, vcov_matrix_beta)
# Printing the results
cat("Call:\n")
cat(paste("formula: ", deparse(object$formula), "\n"))
cat(paste("distribution: ", object$dist, "\n"))
cat("\nCoefficients (beta):\n")
print(beta_table, digits = 4)
# If distribution is 'negbin', display the estimated alpha parameter
if (object$dist == "negbin") {
alpha_vals <- object$alpha
vcov_matrix_alpha <- as.matrix(object$vc[nrow(object$vc), ncol(object$vc)])
alpha_table <- create_table(alpha_vals, vcov_matrix_alpha)
cat("\nalpha:\n")
print(alpha_table, digits = 4)
}
cat(paste("\nSignif. codes:  0 `***' 0.001 `**' 0.01 `*' 0.05 `.' 0.1 ` ' 1\n"))
cat(paste("\nLog-likelihood: ", log_likelihood, "\n"))
}
}
#' Truncated Regression Model
#'
#' Fits a Poisson or negative binomial regression model with zero truncation.
#'
#' @param formula A symbolic description of the model to be fitted.
#' @param data A data frame containing the variables in the model.
#' @param dist A character string specifying the distribution to use. Options are `"Poisson"` or `"negbin"`.
#' @param start Optional. A numeric vector of starting values for the optimization process. Defaults to `NULL`, in which case starting values are attempted to be chosen automatically.
#' @param method A character string specifying the optimization method to be passed to \code{\link[stats]{optim}}. Defaults to `"BFGS"`.
#'
#' @return An object of class `"truncmodel"` containing the following components:
#'   \describe{
#'     \item{\code{beta}}{Estimated coefficients for the regression model.}
#'     \item{\code{alpha}}{Dispersion parameter (only for negative binomial distribution).}
#'     \item{\code{vc}}{Variance-covariance matrix of the estimated parameters.}
#'     \item{\code{logl}}{Log-likelihood of the fitted model.}
#'     \item{\code{dist}}{The distribution used for the model ("Poisson" or "negbin").}
#'     \item{\code{formula}}{The formula used for the model.}
#'   }
#'
#' @details
#' This function fits a regression model for zero-truncated counts. Zero-truncated models are used when the count data does not include zeros, such as in cases where only positive counts are observed.
#'
#' The function supports two distributions:
#' - `"Poisson"`: Zero-truncated Poisson regression.
#' - `"negbin"`: Zero-truncated negative binomial regression.
#'
#' The function uses numerical optimization via \code{\link[stats]{optim}} to estimate the parameters.
#'
#' @seealso
#' \code{\link{makeXZy}} for processing the data into design matrices and response vector.
#' \code{\link[stats]{optim}} for numerical optimization.
#' \code{\link{summary.oneinfl}} for summarizing the fitted model.
#'
#' @examples
#' # Example usage
#' df <- data.frame(x = rnorm(100), y = rpois(100, lambda = 5) + 1)
#' model <- truncreg(y ~ x, data = df, dist = "Poisson")
#' summary(model)
#'
#' @export
truncreg <- function(formula, data, dist = "negbin", start = NULL, method = "BFGS") {
llpp <- function(param) {
l <- as.vector(exp(X %*% param[1:kx]))
if(max(y) > 170) {
log.fac.y <- y * log(y) - y
log.fac.y[y < 171] <- log(factorial(y)[y < 171])
} else if (max(y) < 171) {log.fac.y <- log(factorial(y))}
return(sum(y * log(l) - log(exp(l) - 1) - log.fac.y))
}
llztnb <- function(param) {
li <- as.vector(exp(X %*% param[1:kx]))
a  <- param[kx + 1]
if(max(y) > 170) {
log.fac.y <- y * log(y) - y
log.fac.y[y < 171] <- log(factorial(y)[y < 171])
} else if (max(y) < 171) {log.fac.y <- log(factorial(y))}
ymax <- max(y)
terms <- weights <- rep(0, ymax)
for(ii in 1:ymax) {
terms[ii] <- log(a + ii - 1)
}
weights[1] <- sum(y > 1)
for(ii in 2:ymax) {
weights[ii] <- sum(y > (ii - 1))
}
gterm <- sum(terms * weights)
return(sum((y == 1) * log(a) - log.fac.y + a * log(a) + y * log(li) - (a + y) * log(a + li) - log(1 - (a / (a + li)) ^ a)) + gterm)
}
findstart <- function() {
bs <- 2 / (kx * apply(X, 2, max))
if(dist == "Poisson") {bs}
else if (dist == "negbin") {c(bs, 0.5)}
}
z <- list()
class(z) <- "truncmodel"
z$formula <- formula
cleandata <- makeXZy(formula, data)
X <- cleandata$X
y <- cleandata$y
n <- length(y)
kx <- NCOL(X)
z$dist <- dist
if(is.null(start)) {
pstart <- findstart()
} else {
pstart <- start
}
if (dist == "Poisson") {
fitp <- suppressWarnings(optim(fn=llpp, par=pstart, method=method, control=list(fnscale=-1, maxit=1000), hessian = T))
if (fitp$convergence > 0)
warning("optimization failed to converge")
z$beta <- fitp$par[1:kx]
z$vc <- -solve(as.matrix(fitp$hessian))
colnames(z$vc) <- rownames(z$vc) <- paste("b", colnames(X), sep="")
z$logl <- fitp$value
} else if (dist == "negbin") {
fitnb <- suppressWarnings(optim(fn = llztnb, par = pstart, method=method, control=list(fnscale=-1, maxit=5000), hessian = T))
if (fitnb$convergence > 0)
warning("optimization failed to converge")
z$beta <- fitnb$par[1:kx]
z$alpha <- as.numeric(fitnb$par[kx + 1])
z$vc <- -solve(as.matrix(fitnb$hessian))
colnames(z$vc) <- rownames(z$vc) <- c(paste("b", colnames(X), sep=""), "alpha")
z$logl <- fitnb$value
} else {stop("dist must be either Poisson or negbin")}
names(z$beta) <- paste("b", colnames(X), sep="")
z
}
library(msme)
data(medpar)
data = medpar
formula <- los ~ white + died + type2 + type3 | white + died + type2 + type3
OIZTNB <- oneinfl(formula, data, dist="negbin")
devtools::build(path = "C:/oneinfl")
devtools::build(path = "C:/oneinfl")
install.packages("devtools")
library(EnvStats)
install.packages("EnvStats")
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 2 - asd + (1.5 * treatment) + (1.5 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 1, max = 7, mode = mymode), 0)
min(communication)
max(communication)
df <- data.frame(communication, school, asd, treatment)
mean(communication[treatment == 1 & asd == 0]) - mean(communication[treatment == 0 & asd == 0])
mean(communication[treatment == 1 & asd == 1]) - mean(communication[treatment == 0 & asd == 1])
# Test the Significance of the Treatment Effect (Within Each Group)
t.test(communication ~ treatment)
# For ASD
t.test(communication[asd == 1] ~ treatment[asd == 1])
# For non ASD
t.test(communication[asd == 0] ~ treatment[asd == 0])
# Export the dataframe to a CSV file
write.csv(df, file = "c:/data/music-asd.csv", row.names = FALSE)
# Test the Significance of the Treatment Effect both groups
t.test(communication ~ treatment)
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 3 - 2*asd + (1.5 * treatment) + (1.5 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 1, max = 7, mode = mymode), 0)
hist(communication)
barplot(communication)
barplot(table(communication))
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 3 - 2*asd + (1.5 * treatment) + (1.5 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 0.51, max = 7.49, mode = mymode), 0)
barplot(table(communication))
df <- data.frame(communication, school, asd, treatment)
# subgroups
y.t <- communication[treatment == 1 & asd == 0]
y.u <- communication[treatment == 0 & asd == 0]
y.t.asd <- communication[treatment == 1 & asd == 1]
y.u.asd <- communication[treatment == 0 & asd == 1]
# sample means for each group
x.t <- mean(communication[treatment == 1 & asd == 0])
x.u <- mean(communication[treatment == 0 & asd == 0])
x.t.asd <- mean(communication[treatment == 1 & asd == 1])
x.u.asd <- mean(communication[treatment == 0 & asd == 1])
# treatment effect for each group
x.t - x.u
x.t.asd - x.u.asd
# Test the Significance of the Treatment Effect both groups
t.test(communication ~ treatment)
# For ASD
t.test(communication[asd == 1] ~ treatment[asd == 1])
# For non ASD
t.test(communication[asd == 0] ~ treatment[asd == 0])
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 3.5 - 3*asd + (1.5 * treatment) + (1.5 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 0.51, max = 7.49, mode = mymode), 0)
barplot(table(communication))
# subgroups
y.t <- communication[treatment == 1 & asd == 0]
y.u <- communication[treatment == 0 & asd == 0]
y.t.asd <- communication[treatment == 1 & asd == 1]
y.u.asd <- communication[treatment == 0 & asd == 1]
# sample means for each group
x.t <- mean(communication[treatment == 1 & asd == 0])
x.u <- mean(communication[treatment == 0 & asd == 0])
x.t.asd <- mean(communication[treatment == 1 & asd == 1])
x.u.asd <- mean(communication[treatment == 0 & asd == 1])
# treatment effect for each group
x.t - x.u
x.t.asd - x.u.asd
# Test the Significance of the Treatment Effect both groups
t.test(communication ~ treatment)
# For ASD
t.test(communication[asd == 1] ~ treatment[asd == 1])
# For non ASD
t.test(communication[asd == 0] ~ treatment[asd == 0])
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 3.5 - 3*asd + (1 * treatment) + (1.5 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 0.51, max = 7.49, mode = mymode), 0)
barplot(table(communication))
df <- data.frame(communication, school, asd, treatment)
# subgroups
y.t <- communication[treatment == 1 & asd == 0]
y.u <- communication[treatment == 0 & asd == 0]
y.t.asd <- communication[treatment == 1 & asd == 1]
y.u.asd <- communication[treatment == 0 & asd == 1]
# sample means for each group
x.t <- mean(communication[treatment == 1 & asd == 0])
x.u <- mean(communication[treatment == 0 & asd == 0])
x.t.asd <- mean(communication[treatment == 1 & asd == 1])
x.u.asd <- mean(communication[treatment == 0 & asd == 1])
# treatment effect for each group
x.t - x.u
x.t.asd - x.u.asd
# Test the Significance of the Treatment Effect both groups
t.test(communication ~ treatment)
# For ASD
t.test(communication[asd == 1] ~ treatment[asd == 1])
# For non ASD
t.test(communication[asd == 0] ~ treatment[asd == 0])
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 3.5 - 4*asd + (1 * treatment) + (1 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 0.51, max = 7.49, mode = mymode), 0)
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 4 - 4*asd + (1 * treatment) + (1 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 0.51, max = 7.49, mode = mymode), 0)
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 4.5 - 4*asd + (1 * treatment) + (1 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 0.5, max = 7.5, mode = mymode), 0)
barplot(table(communication))
df <- data.frame(communication, school, asd, treatment)
# subgroups
y.t <- communication[treatment == 1 & asd == 0]
y.u <- communication[treatment == 0 & asd == 0]
y.t.asd <- communication[treatment == 1 & asd == 1]
y.u.asd <- communication[treatment == 0 & asd == 1]
# sample means for each group
x.t <- mean(communication[treatment == 1 & asd == 0])
x.u <- mean(communication[treatment == 0 & asd == 0])
x.t.asd <- mean(communication[treatment == 1 & asd == 1])
x.u.asd <- mean(communication[treatment == 0 & asd == 1])
# treatment effect for each group
x.t - x.u
x.t.asd - x.u.asd
# Test the Significance of the Treatment Effect both groups
t.test(communication ~ treatment)
# For ASD
t.test(communication[asd == 1] ~ treatment[asd == 1])
# For non ASD
t.test(communication[asd == 0] ~ treatment[asd == 0])
library(EnvStats)
set.seed(1)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 4.5 - 4*asd + (1.25 * treatment) + (0.5 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 0.5, max = 7.5, mode = mymode), 0)
barplot(table(communication))
df <- data.frame(communication, school, asd, treatment)
# subgroups
y.t <- communication[treatment == 1 & asd == 0]
y.u <- communication[treatment == 0 & asd == 0]
y.t.asd <- communication[treatment == 1 & asd == 1]
y.u.asd <- communication[treatment == 0 & asd == 1]
# sample means for each group
x.t <- mean(communication[treatment == 1 & asd == 0])
x.u <- mean(communication[treatment == 0 & asd == 0])
x.t.asd <- mean(communication[treatment == 1 & asd == 1])
x.u.asd <- mean(communication[treatment == 0 & asd == 1])
# treatment effect for each group
x.t - x.u
x.t.asd - x.u.asd
# Test the Significance of the Treatment Effect both groups
t.test(communication ~ treatment)
# For ASD
t.test(communication[asd == 1] ~ treatment[asd == 1])
# For non ASD
t.test(communication[asd == 0] ~ treatment[asd == 0])
# Export the dataframe to a CSV file
#write.csv(df, file = "c:/data/music-asd.csv", row.names = FALSE)
library(EnvStats)
set.seed(2)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 4.5 - 4*asd + (1.25 * treatment) + (0.5 * treatment * asd) + (.25 * school)
communication <- round(rtri(n, min = 0.5, max = 7.5, mode = mymode), 0)
barplot(table(communication))
df <- data.frame(communication, school, asd, treatment)
# subgroups
y.t <- communication[treatment == 1 & asd == 0]
y.u <- communication[treatment == 0 & asd == 0]
y.t.asd <- communication[treatment == 1 & asd == 1]
y.u.asd <- communication[treatment == 0 & asd == 1]
# sample means for each group
x.t <- mean(communication[treatment == 1 & asd == 0])
x.u <- mean(communication[treatment == 0 & asd == 0])
x.t.asd <- mean(communication[treatment == 1 & asd == 1])
x.u.asd <- mean(communication[treatment == 0 & asd == 1])
# treatment effect for each group
x.t - x.u
x.t.asd - x.u.asd
# Test the Significance of the Treatment Effect both groups
t.test(communication ~ treatment)
# For ASD
t.test(communication[asd == 1] ~ treatment[asd == 1])
# For non ASD
t.test(communication[asd == 0] ~ treatment[asd == 0])
# Export the dataframe to a CSV file
#write.csv(df, file = "c:/data/music-asd.csv", row.names = FALSE)
# Export the dataframe to a CSV file
write.csv(df, file = "c:/data/music-asd2.csv", row.names = FALSE)
library(EnvStats)
set.seed(2)
n <- 100
school <- c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20))
asd <- c(rep(0,10), rep(1,10), rep(0,10), rep(1,10), rep(0,10), rep(1,10),rep(0,10), rep(1,10), rep(0,10), rep(1,10))
treatment <- c(rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5), rep(0,5), rep(1,5),rep(0,5), rep(1,5), rep(0,5), rep(1,5))
mymode <- 4.5 - 4*asd + (1.25 * treatment) + (0.5 * treatment * asd) + (.25 * school)
outcome <- round(rtri(n, min = 0.5, max = 7.5, mode = mymode), 0)
barplot(table(outcome))
df <- data.frame(outcome, school, asd, treatment)
# subgroups
y.t <- outcome[treatment == 1 & asd == 0]
y.u <- outcome[treatment == 0 & asd == 0]
y.t.asd <- outcome[treatment == 1 & asd == 1]
y.u.asd <- outcome[treatment == 0 & asd == 1]
# sample means for each group
x.t <- mean(outcome[treatment == 1 & asd == 0])
x.u <- mean(outcome[treatment == 0 & asd == 0])
x.t.asd <- mean(outcome[treatment == 1 & asd == 1])
x.u.asd <- mean(outcome[treatment == 0 & asd == 1])
# treatment effect for each group
x.t - x.u
x.t.asd - x.u.asd
# Test the Significance of the Treatment Effect both groups
t.test(outcome ~ treatment)
# For ASD
t.test(outcome[asd == 1] ~ treatment[asd == 1])
# For non ASD
t.test(outcome[asd == 0] ~ treatment[asd == 0])
# Export the dataframe to a CSV file
#write.csv(df, file = "c:/data/music-asd2.csv", row.names = FALSE)
install.packages(D:/packages/oneinfl_0.1.0.tar.gz)
install.packages("D:/packages/oneinfl_0.1.0.tar.gz")
library(msme)
data(medpar)
df = medpar
formula <- los ~ white + died + type2 + type3 | white + died + type2 + type3
OIZTNB <- oneinfl(formula, df, dist="negbin")
library(oneinfl)
OIZTNB <- oneinfl(formula, df, dist="negbin")
OIPP <- oneinfl(formula, df, dist="Poisson")
formula <- los ~ white + died + type2 + type3
ZTNB <- truncreg(formula, df, dist="negbin")
PP <- truncreg(formula, df, dist="Poisson")
oneLRT(OIZTNB, OIPP)
oneLRT(OIZTNB, ZTNB)
oneWald(OIZTNB)
oneplot(PP, OIPP, ZTNB, OIZTNB, data=data, maxpred=20, ylimit=180)
oneplot(PP, OIPP, ZTNB, OIZTNB, df=df, maxpred=20, ylimit=180)
summary.oneinfl(OIZTNB)
summary(OIZTNB)
summary(ZTNB)
install.packages("D:/packages/oneinfl_0.1.0.tar.gz")
library(oneinfl)
install.packages("D:/packages/oneinfl_0.1.0.tar.gz")
install.packages("D:/packages/oneinfl_0.1.0.tar.gz")
library(oneinfl)
library(msme)
data(medpar)
df = medpar
formula <- los ~ white + died + type2 + type3 | white + died + type2 + type3
OIZTNB <- oneinfl(formula, df, dist="negbin")
OIPP <- oneinfl(formula, df, dist="Poisson")
formula <- los ~ white + died + type2 + type3
ZTNB <- truncreg(formula, df, dist="negbin")
PP <- truncreg(formula, df, dist="Poisson")
oneLRT(OIZTNB, OIPP)
oneLRT(OIZTNB, ZTNB)
oneWald(OIZTNB)
oneplot(PP, OIPP, ZTNB, OIZTNB, df=df, maxpred=20, ylimit=180)
summary(OIZTNB)
summary(ZTNB)
signifWald(OIZTNB, "white")
margins(OIZTNB, data)
margins(OIZTNB, df)
margins(OIZTNB, df)
install.packages("oneinfl")
library(oneinfl)
library(msme)
data(medpar)
formula <- los ~ white + died + type2 + type3 | white + died + type2 + type3
OIZTNB <- oneinfl(formula, df=df, dist="negbin")
df = medpar
OIZTNB <- oneinfl(formula, df=df, dist="negbin")
summary(OIZTNB)
signifWald(OIZTNB, "white")
oneinfl(los, df, dist="Poisson")
formula <- los
formula <- los ~ white + died + type2 + type3 | white + died + type2 + type3
formula <- los
formula <- los ~ 1
oneinfl(formula, df=df, dist="negbin")
truncreg(los ~ 1, df, dist="Poisson")
citation("pscl")
install.packages("pscl")
library("pscl")
library(pscl)
citation("pscl")
print(citation("pscl"), bibtex=TRUE)
mydata <- read.csv("https://rtgodwin.com/data/vidsales.csv")
plot(Sales ~ Score, data=mydata)
plot(log(Sales) ~ Score, data=mydata)
plot(Sales ~ Score, data=mydata)
View(mydata)
sub <- subset(mydata, Platform=="X360", data=mydata)
sub <- subset(mydata, mydata$Platform=="X360")
sub <- subset(mydata, mydata$Platform=="X360" | mydata$Platform=="Wii" | mydata$Platform=="PS3")
plot(Sales ~ Score, data=sub)
summary(lm(Sales ~ Score, data=sub))
plot(log(Sales) ~ Score, data=sub)
summary(lm(log(Sales) ~ Score, data=sub))
9/44
setwd("D:/packages/oneinfl1.0.1")
roxygen2::roxygenize()
devtools::document()
devtools::check()
devtools::build()
